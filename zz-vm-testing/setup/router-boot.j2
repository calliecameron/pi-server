#!/bin/bash
# Testbed router boot script

source '{{ testbed_helper }}'

DEFAULT_ROUTE='{{ internet_ip }}'
PI_IP='{{ pi_ip }}'
PI_VPN_NET='{{ pi_vpn_mask }}'
OTHER_LAN_NET='{{ other_lan_mask }}'
VAGRANT_IFACE='eth0'
INTERNET_IFACE='eth1'
LAN_IFACE='eth2'

function iface-exists()
{
    ip a | grep "${1}" &>/dev/null
}

function setup() {
    if iface-exists lo &&
            iface-exists "${INTERNET_IFACE}" &&
            iface-exists "${LAN_IFACE}"; then
        sysctl -w net.ipv4.ip_forward=1

        # Vagrant's existing default route is through NAT, so delete it first
        ip route del default
        ip route add default via "${DEFAULT_ROUTE}" dev "${INTERNET_IFACE}"

        # Route for pi's VPN subnet (needed for single-machine clients)
        ip route add "${PI_VPN_NET}/24" via "${PI_IP}" dev "${LAN_IFACE}"

        # Route for the other LAN (needed for server-to-server clients)
        ip route add "${OTHER_LAN_NET}/24" via "${PI_IP}" dev "${LAN_IFACE}"

        if first-time; then
            # Allow vagrant ssh access
            iptables -A INPUT -i "${VAGRANT_IFACE}" -j ACCEPT

            iptables -A INPUT -i lo -j ACCEPT
            iptables -A INPUT -i "${LAN_IFACE}" -j ACCEPT
            iptables -A INPUT -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
            iptables -A INPUT -p icmp --icmp-type echo-request -j ACCEPT
            iptables -A INPUT -j DROP
            iptables -A FORWARD -i "${LAN_IFACE}" -j ACCEPT
            iptables -A FORWARD -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
            iptables -A FORWARD -j DROP
            iptables -t nat -A POSTROUTING -o "${INTERNET_IFACE}" -j MASQUERADE

            # Port forward for VPN connection
            iptables -t nat -A PREROUTING -i "${INTERNET_IFACE}" -p tcp --dport 1194 -j DNAT --to "${PI_IP}:1194"
            iptables -I FORWARD -p tcp -d "${PI_IP}" --dport 1194 -j ACCEPT
        fi
    fi
}

with-lock setup

exit 0
