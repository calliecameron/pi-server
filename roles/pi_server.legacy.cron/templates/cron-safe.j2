#!/bin/bash
# Run scripts that need services to be paused, and with locking for safety

EMAIL_SCRIPT='{{ pi_server_apps_email_script }}'
CRON_LOCK='{{ pi_server_legacy_cron_lock }}'
PAUSE_DIR='{{ pi_server_legacy_cron_pause_dir }}'
SCRIPTS_DIR='{{ pi_server_legacy_cron_safe_dir }}'
LOG='{{ pi_server_legacy_cron_log_file }}'
HAS_LOCK=''

function lock() {
    if mkdir "${CRON_LOCK}" &>/dev/null; then
        HAS_LOCK='t'
        return 0
    else
        return 1
    fi
}

function unlock() {
    if [ ! -z "${HAS_LOCK}" ] && [ -e "${CRON_LOCK}" ]; then
        rmdir "${CRON_LOCK}"
    fi
}

function start-services() {
    echo "Starting services..." >> "${LOG}"
    find "${PAUSE_DIR}" -type f | LC_ALL=C sort | while read -r line; do
        /bin/systemctl restart "$(basename "${line}")" &>> "${LOG}"
    done
    echo "Started services" >> "${LOG}"
}

function stop-services() {
    echo "Stopping services..." >> "${LOG}"
    find "${PAUSE_DIR}" -type f | LC_ALL=C sort | while read -r line; do
        /bin/systemctl stop "$(basename "${line}")" &>> "${LOG}"
    done
    echo "Stopped services" >> "${LOG}"
}

function cleanup() {
    if [ ! -z "${HAS_LOCK}" ]; then
        if type _extra-cleanup &>/dev/null; then
            _extra-cleanup
        fi
        start-services
        unlock
    fi
}

function fail() {
    "${EMAIL_SCRIPT}" 'Cron failed' "${@}"
    if [ ! -z "${HAS_LOCK}" ]; then
        echo "${@}" >> "${LOG}"
    fi
    cleanup
    exit 1
}


if [ "$(id -u)" != '0' ]; then
    fail 'Cron script must be run as root.'
fi

if ! lock; then
    fail 'Tried to run safe cron when another instance is already running.'
fi

:> "${LOG}"

stop-services || fail "Couldn't stop services."

# shellcheck disable=SC2015
SCRIPT_LIST="$(mktemp)" &&
find "${SCRIPTS_DIR}" -type f | LC_ALL=C sort > "${SCRIPT_LIST}" || fail "Couldn't list scripts."

while read -r SCRIPT_FILE_NAME; do
    echo "STARTED '$(basename "${SCRIPT_FILE_NAME}")' at $(date)" >> "${LOG}"
    source "${SCRIPT_FILE_NAME}" || fail "Couldn't run $(basename "${SCRIPT_FILE_NAME}")."
    echo "FINISHED '$(basename "${SCRIPT_FILE_NAME}")' at $(date)" >> "${LOG}"
done < "${SCRIPT_LIST}"

rm "${SCRIPT_LIST}"
cleanup
