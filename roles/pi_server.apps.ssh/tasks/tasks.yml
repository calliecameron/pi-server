- name: Dependency
  ansible.builtin.include_role:
    name: pi_server.apps.email

- name: Check for user keys
  ansible.builtin.include_role:
    name: pi_server.utils.require_file
  vars:
    path: "/home/{{ ansible_user }}/.ssh/id_rsa"
    msg: "User's SSH key doesn't exist"

- name: Check for authorised keys
  ansible.builtin.include_role:
    name: pi_server.utils.require_file
  vars:
    path: "/home/{{ ansible_user }}/.ssh/authorized_keys"
    msg: "No authorised keys exist"

- name: Etc dir
  become: true
  ansible.builtin.file:
    path: "{{ pi_server_apps_ssh_etc }}"
    state: directory
    owner: root
    group: root
    mode: u=rwx,go=rx

- name: Login email exceptions
  ansible.builtin.include_role:
    name: pi_server.utils.create_file
  vars:
    path: "{{ pi_server_apps_ssh_login_exceptions }}"
    owner: root
    group: root
    mode: u=rw,go=r
    create_notify:

- name: Email on login script
  become: true
  ansible.builtin.template:
    src: email-on-login.j2
    dest: "{{ pi_server_apps_ssh_login_email_script }}"
    owner: root
    group: root
    mode: a=rx

- name: Send email on login
  become: true
  ansible.builtin.lineinfile:
    path: /etc/pam.d/sshd
    line: "session    optional pam_exec.so seteuid {{ pi_server_apps_ssh_login_email_script }}"

- name: Hardening
  ansible.builtin.include_role:
    name: devsec.hardening.ssh_hardening
    apply:
      become: true
  vars:
    ssh_allow_users: "{{ ansible_user }}"
    ssh_allow_tcp_forwarding: "yes"

- name: Monitor ssh service
  ansible.builtin.include_role:
    name: pi_server.apps.monitoring.monitor_systemd_service
  vars:
    systemd_service: ssh
