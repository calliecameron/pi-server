- include_role:
    name: pi_server.apps.email

- name: check for authorised keys
  ansible.builtin.command: ls .ssh/authorized_keys
  register: authorized_keys_exists
  failed_when: False
  changed_when: False

- name: fail if no authorized keys
  ansible.builtin.fail:
    msg: "No authorized_keys exist."
  when: authorized_keys_exists.rc != 0

- name: etc dir
  become: yes
  ansible.builtin.file:
    path: "{{ pi_server_apps_ssh_etc }}"
    state: directory
    owner: root
    group: root
    mode: u=rwx,go=rx

- name: sshd config
  become: yes
  ansible.builtin.template:
    src: sshd_config.j2
    dest: /etc/ssh/sshd_config
    owner: root
    group: root
    mode: a=r
  notify: reload sshd

- name: check login email exceptions
  ansible.builtin.command: "ls {{ pi_server_apps_ssh_login_exceptions }}"
  register: login_exceptions_exists
  failed_when: False
  changed_when: False

- name: login email exceptions
  become: yes
  ansible.builtin.copy:
    content: ""
    dest: "{{ pi_server_apps_ssh_login_exceptions }}"
    owner: root
    group: root
    mode: u=rw,go=r
  when: login_exceptions_exists.rc != 0

- name: email on login script
  become: yes
  ansible.builtin.template:
    src: email-on-login.j2
    dest: "{{ pi_server_apps_ssh_login_email_script }}"
    owner: root
    group: root
    mode: a=rx

- name: send email on login
  become: yes
  ansible.builtin.lineinfile:
    path: /etc/pam.d/sshd
    line: "session optional pam_exec.so seteuid {{ pi_server_apps_ssh_login_email_script }}"
