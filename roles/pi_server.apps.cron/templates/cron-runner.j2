#!/bin/bash
# MANAGED BY ANSIBLE, CHANGES WILL BE OVERWRITTEN
# Run other cronjobs.

set -eu

{{ cron_wrapper_line }}

PAUSE_DIR='{{ pi_server_apps_cron_pause_dir }}'
SCRIPTS_DIR='{{ pi_server_apps_cron_scripts_dir }}'

function warning() {
    echo "WARNING:" "${@}"
}

function error() {
    echo "ERROR:" "${@}"
}

function start-services() {
    local BASENAME
    local SERVICE
    echo 'Starting services...'
    find "${PAUSE_DIR}" -type f | LC_ALL=C sort | while read -r line; do
        BASENAME="$(basename "${line}")"
        if [[ "${BASENAME}" == *.systemd ]]; then
            SERVICE="$(basename "${BASENAME}" '.systemd')"
            if sudo systemctl restart "${SERVICE}"; then
                echo "Started systemd service '${SERVICE}'"
            else
                warning "failed to start systemd service '${SERVICE}'"
            fi
        elif [[ "${BASENAME}" == *.docker ]]; then
            SERVICE="$(basename "${BASENAME}" '.docker')"
            if sudo docker restart "${SERVICE}" >/dev/null; then
                echo "Started docker service '${SERVICE}'"
            else
                warning "failed to start docker service '${SERVICE}'"
            fi
        else
            warning "unknown service type for '${BASENAME}'"
        fi
    done
    echo 'Finished starting services'
}

function stop-services() {
    local BASENAME
    local SERVICE
    echo 'Stopping services...'
    find "${PAUSE_DIR}" -type f | LC_ALL=C sort | while read -r line; do
        BASENAME="$(basename "${line}")"
        if [[ "${BASENAME}" == *.systemd ]]; then
            SERVICE="$(basename "${BASENAME}" '.systemd')"
            if sudo systemctl stop "${SERVICE}" >/dev/null; then
                echo "Stopped systemd service '${SERVICE}'"
            else
                error "couldn't stop systemd service '${SERVICE}'"
                exit 1
            fi
        elif [[ "${BASENAME}" == *.docker ]]; then
            SERVICE="$(basename "${BASENAME}" '.docker')"
            if sudo docker stop "${SERVICE}" >/dev/null; then
                echo "Stopped docker service '${SERVICE}'"
            else
                error "couldn't stop docker service '${SERVICE}'"
                exit 1
            fi
        else
            warning "unknown service type for '${BASENAME}'"
        fi
    done
    echo 'Finished stopping services'
}

function handle-signal() {
    echo 'caught a signal'
    start-services
    error 'interrupted by a signal'
    exit 1
}

if [ -e '{{ pi_server_apps_cron_disabled }}' ]; then
    error 'running is disabled'
    exit 1
fi

SCRIPT_LIST="$(mktemp)"
if [ -z "${SCRIPT_LIST:-}" ]; then
    error "couldn't create script list file"
    exit 1
fi

if ! find "${SCRIPTS_DIR}" -type f | LC_ALL=C sort >"${SCRIPT_LIST}"; then
    error "couldn't list scripts"
    exit 1
fi

trap handle-signal SIGINT SIGTERM

stop-services

echo "Running $(wc -l <"${SCRIPT_LIST}") script(s)"

while read -r script; do
    BASENAME="$(basename "${script}")"
    if [ -z "${BASENAME:-}" ]; then
        warning "couldn't get basename of '${script}'; skipping this script"
        continue
    fi
    SERVICE="pi-server-cron-${BASENAME}"
    echo "RUNNING service '${SERVICE}'"
    if sudo systemctl start --wait "${SERVICE}"; then
        echo "FINISHED RUNNING service '${SERVICE}'"
    else
        warning "service '${SERVICE}' failed"
    fi
done <"${SCRIPT_LIST}"

rm -f "${SCRIPT_LIST}"

start-services
