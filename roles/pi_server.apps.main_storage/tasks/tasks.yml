- name: Dependency
  ansible.builtin.include_role:
    name: pi_server.apps.email

- name: Install zfs
  become: true
  ansible.builtin.package:
    name: zfsutils-linux
    state: present

- name: Check if zpool exists
  become: false
  ansible.builtin.command:
    cmd: "zpool list '{{ pi_server_storage_zpool }}'"
  register: exists
  failed_when: false
  changed_when: false

- name: Fail if zpool doesn't exist
  ansible.builtin.fail:
    msg: "zpool '{{ pi_server_storage_zpool }}' doesn't exist"
  when: exists.rc != 0

- name: Get zpool mountpoint
  become: false
  ansible.builtin.command:
    cmd: "zfs get -H -o value mountpoint '{{ pi_server_storage_zpool }}'"
  register: mountpoint
  changed_when: false

- name: Fail if zpool has the wrong mountpoint
  ansible.builtin.fail:
    msg: "zpool '{{ pi_server_storage_zpool }}' isn't mounted at '{{ pi_server_apps_main_storage_zpool_mount_dir }}'"
  when: mountpoint.stdout != pi_server_apps_main_storage_zpool_mount_dir

- name: Check if data dataset exists
  become: false
  ansible.builtin.command:
    cmd: "zfs list '{{ pi_server_storage_zpool }}/{{ pi_server_apps_main_storage_data_dataset }}'"
  register: exists
  failed_when: false
  changed_when: false

- name: Create data dataset if it doesn't exist
  become: true
  ansible.builtin.command:
    cmd: "zfs create '{{ pi_server_storage_zpool }}/{{ pi_server_apps_main_storage_data_dataset }}'"
  when: exists.rc != 0
  changed_when: true

- name: Get data dataset mountpoint
  become: false
  ansible.builtin.command:
    cmd: "zfs get -H -o value mountpoint '{{ pi_server_storage_zpool }}/{{ pi_server_apps_main_storage_data_dataset }}'"
  register: mountpoint
  changed_when: false

- name: Fail if data dataset has the wrong mountpoint
  ansible.builtin.fail:
    msg: "dataset '{{ pi_server_storage_zpool }}/{{ pi_server_apps_main_storage_data_dataset }}' isn't mounted at '{{ pi_server_apps_main_storage_data_dir }}'"
  when: mountpoint.stdout != pi_server_apps_main_storage_data_dir

- name: Check if scratch dataset exists
  become: false
  ansible.builtin.command:
    cmd: "zfs list '{{ pi_server_storage_zpool }}/{{ pi_server_apps_main_storage_scratch_dataset }}'"
  register: exists
  failed_when: false
  changed_when: false

- name: Create scratch dataset if it doesn't exist
  become: true
  ansible.builtin.command:
    cmd: "zfs create '{{ pi_server_storage_zpool }}/{{ pi_server_apps_main_storage_scratch_dataset }}'"
  when: exists.rc != 0
  changed_when: true

- name: Get scratch dataset mountpoint
  become: false
  ansible.builtin.command:
    cmd: "zfs get -H -o value mountpoint '{{ pi_server_storage_zpool }}/{{ pi_server_apps_main_storage_scratch_dataset }}'"
  register: mountpoint
  changed_when: false

- name: Fail if scratch dataset has the wrong mountpoint
  ansible.builtin.fail:
    msg: "dataset '{{ pi_server_storage_zpool }}/{{ pi_server_apps_main_storage_scratch_dataset }}' isn't mounted at '{{ pi_server_apps_main_storage_scratch_dir }}'"
  when: mountpoint.stdout != pi_server_apps_main_storage_scratch_dir

- name: Configure zed
  become: true
  ansible.builtin.template:
    src: zed.rc.j2
    dest: /etc/zfs/zed.d/zed.rc
    owner: root
    group: root
    mode: u=rw,go=r

- name: Install zfs-auto-snapshot
  become: true
  ansible.builtin.package:
    name: zfs-auto-snapshot
    state: present

- name: Configure weekly scrub
  become: true
  ansible.builtin.template:
    src: zfs-scrub.j2
    dest: /etc/cron.weekly/zfs-scrub
    owner: root
    group: root
    mode: a=rx

- name: Etc dir
  become: true
  ansible.builtin.file:
    path: "{{ pi_server_apps_main_storage_etc }}"
    state: directory
    owner: root
    group: root
    mode: u=rwx,go=rx

- name: Exporter user
  ansible.builtin.include_role:
    name: pi_server.utils.user
  vars:
    user: "{{ pi_server_apps_main_storage_zfs_exporter_user }}"
    register:

- name: Exporter monitoring writer
  ansible.builtin.include_role:
    name: pi_server.apps.monitoring.writer
  vars:
    user: "{{ pi_server_apps_main_storage_zfs_exporter_user }}"

- name: Exporter script
  become: true
  ansible.builtin.template:
    src: zfs-exporter.j2
    dest: "{{ pi_server_apps_main_storage_zfs_exporter_script }}"
    owner: root
    group: root
    mode: a=rx
  notify: Reload zfs exporter

- name: Scrub info script
  become: true
  ansible.builtin.get_url:
    url: "https://raw.githubusercontent.com/Josef-Friedrich/check_zpool_scrub/{{ pi_server_apps_main_storage_zfs_scrub_info_commit }}/check_zpool_scrub"
    dest: "{{ pi_server_apps_main_storage_zfs_scrub_info_script }}"
    checksum: "{{ pi_server_apps_main_storage_zfs_scrub_info_checksum }}"
    owner: root
    group: root
    mode: a=rx

- name: Exporter service
  ansible.builtin.include_role:
    name: pi_server.utils.systemd_service
  vars:
    src: zfs-exporter.service.j2
    service: "{{ pi_server_apps_main_storage_zfs_exporter_service }}"
    enabled: true

- name: Monitor exporter service
  ansible.builtin.include_role:
    name: pi_server.apps.monitoring.monitor_systemd_service
  vars:
    systemd_service: "{{ pi_server_apps_main_storage_zfs_exporter_service }}"

- name: Alerts
  ansible.builtin.include_role:
    name: pi_server.apps.monitoring.custom_alerts
  vars:
    src: zfs-alerts-custom.yml
    job: zfs

- name: Install smartmontools
  become: true
  ansible.builtin.package:
    name: smartmontools
    state: present

- name: Smartmontools email script
  become: true
  ansible.builtin.template:
    src: smartd-send-email.j2
    dest: "{{ pi_server_apps_main_storage_smartd_email }}"
    owner: root
    group: root
    mode: a=rx

- name: Smartd.conf
  become: true
  ansible.builtin.template:
    src: smartd.conf.j2
    dest: "/etc/smartd.conf"
    owner: root
    group: root
    mode: a=r
  notify: Reload smartd
