#!/bin/bash
# MANAGED BY ANSIBLE, CHANGES WILL BE OVERWRITTEN
# Git backup.

set -eu

{{ cron_wrapper_line }}

BACKUP_PARTITION='{{ pi_server_apps_main_storage_backup_mount_dir }}'
GIT_BACKUP_CONFIG='{{ pi_server_apps_backup_git_config }}'
GIT_DIR='{{ pi_server_apps_backup_git_dir }}'
GIT_SSH_SCRIPT='{{ pi_server_apps_backup_git_ssh }}'

function cleanup() {
    sync
    if mount | grep "${BACKUP_PARTITION}" &>/dev/null; then
        sudo umount "${BACKUP_PARTITION}"
    fi
}

function warning() {
    echo "WARNING:" "${@}"
}

function error() {
    echo "ERROR:" "${@}"
    cleanup
    exit 1
}

if ! mount | grep "${BACKUP_PARTITION}" &>/dev/null; then
    if ! sudo mount "${BACKUP_PARTITION}" &>/dev/null; then
        error 'cannot mount backup partition'
    fi
fi

export GIT_SSH="${GIT_SSH_SCRIPT}"

if [ -f "${GIT_BACKUP_CONFIG}" ]; then
    echo "Checking $(wc -l < "${GIT_BACKUP_CONFIG}") repo(s)"
    while read -r line; do
        if [ -n "${line}" ]; then
            REPO_PATH="${GIT_DIR}/$(basename "${line}" '.git')"
            if [ ! -d "${REPO_PATH}" ]; then
                cd /
                echo "Cloning ${line} to ${REPO_PATH}"
                if git clone --mirror "${line}" "${REPO_PATH}"; then
                    echo "Cloned ${line} to ${REPO_PATH}"
                else
                    error "cloning ${line} failed"
                fi
            else
                cd "${REPO_PATH}"
                echo "Updating ${REPO_PATH}"
                if git fetch --all && git fetch --all --tags; then
                    echo "Updated ${REPO_PATH}"
                else
                    error "fetching ${REPO_PATH} failed"
                fi
            fi
        fi
    done <"${GIT_BACKUP_CONFIG}"
else
    warning 'config file does not exist'
fi

cleanup
