- name: Dependency
  ansible.builtin.include_role:
    name: pi_server.apps.openvpn.base

- name: Dependency
  ansible.builtin.include_role:
    name: pi_server.apps.email

- name: Check that openvpn cert exists
  ansible.builtin.include_role:
    name: pi_server.utils.require_file
  vars:
    path: "{{ pi_server_apps_openvpn_server_cert }}"
    msg: "openvpn cert ({{ pi_server_apps_openvpn_server_cert }}) doesn't exist"

- name: Check that openvpn key exists
  ansible.builtin.include_role:
    name: pi_server.utils.require_file
  vars:
    path: "{{ pi_server_apps_openvpn_server_key }}"
    msg: "openvpn key ({{ pi_server_apps_openvpn_server_key }}) doesn't exist"

- name: Check that dh params exist
  ansible.builtin.include_role:
    name: pi_server.utils.require_file
  vars:
    path: "{{ pi_server_apps_openvpn_server_dh_params }}"
    msg: "openvpn dh params ({{ pi_server_apps_openvpn_server_dh_params }}) doesn't exist"

- name: Openvpn cert
  become: true
  ansible.builtin.file:
    path: "{{ pi_server_apps_openvpn_server_cert }}"
    owner: root
    group: root
    mode: a=r

- name: Openvpn key
  become: true
  ansible.builtin.file:
    path: "{{ pi_server_apps_openvpn_server_key }}"
    owner: root
    group: root
    mode: u=r,go=

- name: Openvpn dh params
  become: true
  ansible.builtin.file:
    path: "{{ pi_server_apps_openvpn_server_dh_params }}"
    owner: root
    group: root
    mode: u=r,go=

- name: Client config dir
  become: true
  ansible.builtin.file:
    path: "{{ pi_server_apps_openvpn_server_client_config_dir }}"
    state: directory
    owner: root
    group: root
    mode: u=rwx,go=rx

- name: Check if server-to-server client config exists
  become: true
  ansible.builtin.command:
    cmd: "ls {{ pi_server_apps_openvpn_server_to_server_config }}"
  register: exists
  failed_when: false
  changed_when: false

- name: Server-to-server client config
  become: true
  ansible.builtin.copy:
    src: server-to-server-clients
    dest: "{{ pi_server_apps_openvpn_server_to_server_config }}"
    owner: root
    group: root
    mode: a=r
  when: exists.rc != 0

- name: Login email script
  become: true
  ansible.builtin.template:
    src: email-on-login.j2
    dest: "{{ pi_server_apps_openvpn_server_login_email_script }}"
    owner: root
    group: root
    mode: a=rx

- name: Openvpn config
  become: true
  ansible.builtin.template:
    src: openvpn-server.conf.j2
    dest: "{{ pi_server_apps_openvpn_config_dir }}/openvpn-server.conf"
    owner: root
    group: root
    mode: u=r,go=
  notify: Reload openvpn

- name: Autostart server
  become: true
  ansible.builtin.lineinfile:
    path: "{{ pi_server_apps_openvpn_autostart_file }}"
    line: "AUTOSTART=\"openvpn-server\""
    regexp: "^AUTOSTART=\".*\"$"
    owner: root
    group: root
    mode: a=r
  notify: Reload openvpn

- name: Open port
  ansible.builtin.include_role:
    name: pi_server.apps.firewall.tcp_port
  vars:
    port: "{{ pi_server_apps_openvpn_port }}"
