- name: Dependency
  ansible.builtin.include_role:
    name: pi_server.apps.openvpn.base

- name: Save client cert name
  ansible.builtin.set_fact:
    pi_server_apps_openvpn_host_to_server_client_cert: "{{ pi_server_apps_certs_etc }}/openvpn-client.crt"
    pi_server_apps_openvpn_host_to_server_client_key: "{{ pi_server_apps_certs_etc }}/openvpn-client.key"

- name: Check that client cert exists
  ansible.builtin.include_role:
    name: pi_server.utils.require_file
  vars:
    path: "{{ pi_server_apps_openvpn_host_to_server_client_cert }}"
    msg: "client cert ({{ pi_server_apps_openvpn_host_to_server_client_cert }}) doesn't exist"

- name: Check that client key exists
  ansible.builtin.include_role:
    name: pi_server.utils.require_file
  vars:
    path: "{{ pi_server_apps_openvpn_host_to_server_client_key }}"
    msg: "client key ({{ pi_server_apps_openvpn_host_to_server_client_key }}) doesn't exist"

- name: Client cert
  become: true
  ansible.builtin.file:
    path: "{{ pi_server_apps_openvpn_host_to_server_client_cert }}"
    owner: root
    group: root
    mode: a=r

- name: Client key
  become: true
  ansible.builtin.file:
    path: "{{ pi_server_apps_openvpn_host_to_server_client_key }}"
    owner: root
    group: root
    mode: u=r,go=

- name: Config file
  become: true
  ansible.builtin.template:
    src: config.j2
    dest: "{{ pi_server_apps_openvpn_config_dir }}/{{ args.name }}-client.conf"
    owner: root
    group: root
    mode: u=r,go=

- name: Systemd service
  ansible.builtin.include_role:
    name: pi_server.utils.systemd_service
  vars:
    src: service.j2
    service: "pi-server-openvpn-client-{{ args.name }}"
    enabled: false
