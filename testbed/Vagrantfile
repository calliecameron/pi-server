# -*- mode: ruby -*-
# vi: set ft=ruby :

ENV["VAGRANT_EXPERIMENTAL"] = "disks"

require 'json'

required_plugins = %w( vagrant-reload )
required_plugins.each do |plugin|
  exec "vagrant plugin install #{plugin} && vagrant #{ARGV.join(" ")}" unless
    Vagrant.has_plugin? plugin || ARGV[0] == 'plugin'
end

# Config defines the IP addresses of the VMs, so it can be shared with ansible
$c = JSON.parse(File.read('config.json'))
$addrs = $c["addrs"]
$masks = $c["masks"]

def sync_folders(vm)
  vm.vm.synced_folder "..", "/vagrant", type: "rsync", rsync__exclude: [".git/", ".ansible-galaxy/"]
end

def internet(config)
  config.vm.define "internet" do |internet|
    internet.vm.box = "ubuntu/focal64"
    internet.vm.hostname = "internet"
    internet.vm.network "private_network", ip: $addrs["internet"]
    sync_folders(internet)
    internet.vm.provision "ansible" do |ansible|
      ansible.compatibility_mode = "2.0"
      ansible.playbook = "internet.yml"
      ansible.extra_vars = {
        pi_server_testbed_vagrant_iface: "enp0s3",
        pi_server_testbed_internet_iface: "enp0s8",
        pi_server_testbed_nonexistent_wan_ip: $addrs["nonexistent_wan"],
        pi_server_testbed_lan1_mask: $masks["lan1"],
        pi_server_testbed_lan2_mask: $masks["lan2"],
        pi_server_testbed_pi1_ip: $addrs["pi1"],
        pi_server_testbed_pi2_ip: $addrs["pi2"],
        pi_server_testbed_ubuntu_ip: $addrs["ubuntu"],
        pi_server_email_smtp_port: "1025"
      }
    end
    internet.vm.provision :reload
  end
end


def router(config, name, wan_ip, lan_ip, pi_ip, pi_vpn_mask, other_lan_mask, other_vpn_mask)
  config.vm.define name do |box|
    box.vm.box = "ubuntu/focal64"
    box.vm.hostname = name
    box.vm.network "private_network", ip: wan_ip
    box.vm.network "private_network", ip: lan_ip
    sync_folders(box)
    box.vm.provision "ansible" do |ansible|
      ansible.compatibility_mode = "2.0"
      ansible.playbook = "router.yml"
      ansible.extra_vars = {
        pi_server_testbed_vagrant_iface: "enp0s3",
        pi_server_testbed_internet_iface: "enp0s8",
        pi_server_testbed_lan_iface: "enp0s9",
        pi_server_testbed_internet_ip: $addrs["internet"],
        pi_server_testbed_pi_ip: pi_ip,
        pi_server_testbed_pi_vpn_mask: pi_vpn_mask,
        pi_server_testbed_other_lan_mask: other_lan_mask,
        pi_server_testbed_other_vpn_mask: other_vpn_mask
      }
    end
    box.vm.provision :reload
  end
end


def pi(config, name, pi_ip, router_lan_ip, pi_lan_mask, pi_vpn_mask, openvpn_target_ip, openvpn_client_name, openvpn_client_lan_mask, openvpn_client_vpn_mask, openvpn_role)
  config.vm.define name do |box|
    box.vm.box = "ubuntu/focal64"
    box.vm.hostname = name
    box.vm.network "private_network", ip: pi_ip
    box.vm.disk :disk, size: "100MB", name: "external"
    sync_folders(box)
    box.vm.provision "ansible" do |ansible|
      ansible.compatibility_mode = "2.0"
      ansible.playbook = "pi.yml"
      ansible.extra_vars = {
        pi_server_hostname: name,
        pi_server_timezone: "Europe/Zurich",
        pi_server_email_target: "fake@fake.testbed",
        pi_server_email_smtp_server: $addrs["internet"],
        pi_server_email_smtp_port: "1025",
        pi_server_fqdn: name + ".testbed",
        pi_server_lan_iface: "enp0s8",
        pi_server_lan_ip: pi_ip,
        pi_server_firewall_forwarding: "yes",
        pi_server_monitoring_entrypoint_port: "80",
        pi_server_zoneedit_username: "",
        pi_server_zoneedit_password: "",
        pi_server_control_panel_port: "80",
        pi_server_storage_drive: "/dev/sdc",
        pi_server_storage_data_partition: "1",
        pi_server_storage_backup_partition: "2",
        pi_server_storage_spinning_drive: "n",
        pi_server_lan_network: pi_lan_mask,
        pi_server_vpn_network: pi_vpn_mask,
        pi_server_testbed_router_ip: router_lan_ip,
        pi_server_testbed_internet_ip: $addrs["internet"],
        openvpn_target_ip: openvpn_target_ip,
        openvpn_client_name: openvpn_client_name,
        openvpn_client_lan_mask: openvpn_client_lan_mask,
        openvpn_client_vpn_mask: openvpn_client_vpn_mask,
        openvpn_role: openvpn_role
      }
    end
    box.vm.provision :reload
  end
end


def ubuntu(config)
  config.vm.define "ubuntu" do |ubuntu|
    ubuntu.vm.box = "ubuntu/focal64"
    ubuntu.vm.hostname = "ubuntu"
    ubuntu.vm.network "private_network", ip: $addrs["ubuntu"]
    sync_folders(ubuntu)
    ubuntu.vm.provision "ansible" do |ansible|
      ansible.compatibility_mode = "2.0"
      ansible.playbook = "ubuntu.yml"
      ansible.extra_vars = {
        pi_server_hostname: "ubuntu",
        pi_server_timezone: "Europe/Zurich",
        pi_server_email_target: "fake@fake.testbed",
        pi_server_email_smtp_server: $addrs["internet"],
        pi_server_email_smtp_port: "1025",
        pi_server_fqdn: "ubuntu.testbed",
        pi_server_lan_iface: "enp0s8",
        pi_server_lan_ip: $addrs["ubuntu"],
        pi_server_firewall_forwarding: "no",
        pi_server_monitoring_entrypoint_port: "80",
        pi_server_testbed_router_ip: $addrs["internet"],
        pi_server_testbed_internet_ip: $addrs["internet"],
        openvpn_target_ip: $addrs["router2_wan"],
        openvpn_role: "external_client"
      }
    end
    ubuntu.vm.provision :reload
  end
end


Vagrant.configure("2") do |config|
  internet config

  router config, "router1", $addrs["router1_wan"], $addrs["router1_lan"], $addrs["pi1"], $masks["pi1_vpn"], $masks["lan2"], $masks["pi2_vpn"]
  router config, "router2", $addrs["router2_wan"], $addrs["router2_lan"], $addrs["pi2"], $masks["pi2_vpn"], $masks["lan1"], $masks["pi1_vpn"]

  pi config, "pi1", $addrs["pi1"], $addrs["router1_lan"], $masks["lan1"], $masks["pi1_vpn"], $addrs["router2_wan"], "pi2", $masks["lan2"], $masks["pi2_vpn"], "client"
  pi config, "pi2", $addrs["pi2"], $addrs["router2_lan"], $masks["lan2"], $masks["pi2_vpn"], $addrs["router1_wan"], "pi1", $masks["lan1"], $masks["pi1_vpn"], "server"

  ubuntu config
end
