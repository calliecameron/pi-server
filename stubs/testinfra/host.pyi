import datetime
from collections.abc import Sequence
from contextlib import AbstractContextManager
from typing import Any

from helpers import CronRunner, Journal, ShadowDir, ShadowFile, Time

from testinfra.backend.base import CommandResult
from testinfra.modules.addr import Addr
from testinfra.modules.docker import Docker
from testinfra.modules.file import File
from testinfra.modules.mountpoint import MountPoint
from testinfra.modules.package import Package
from testinfra.modules.process import Process
from testinfra.modules.service import Service
from testinfra.modules.sudo import Sudo
from testinfra.modules.user import User

# ruff: noqa: ANN401

class Host:
    def addr(self, addr: str) -> Addr: ...
    def run(self, command: str, *args: Any) -> CommandResult: ...
    def run_expect(self, expected: Sequence[int], command: str, *args: Any) -> None: ...
    def check_output(self, command: str, *args: Any) -> str: ...
    def file(self, path: str) -> File: ...
    def shadow_file(self, path: str) -> ShadowFile: ...
    def shadow_dir(self, path: str) -> ShadowDir: ...
    def mount_point(self, path: str) -> MountPoint: ...
    def package(self, package: str) -> Package: ...
    def user(self, user: str) -> User: ...
    def sudo(self, user: str | None = None) -> Sudo: ...
    def service(self, name: str) -> Service: ...
    def run_crons(
        self,
        time: datetime.time | None = None,
        cmd_to_watch: str = "",
        disable_sources_list: bool = True,
        date: datetime.date | None = None,
    ) -> CronRunner: ...
    def client_ip(self) -> str: ...
    def disable_login_emails(self) -> AbstractContextManager[None]: ...
    def make_bigfile(self, path: str, mount_point: str) -> None: ...
    def group_membership(self, user: str, group: str) -> AbstractContextManager[None]: ...
    def exists(self, command: str) -> bool: ...
    def journal(self) -> Journal: ...
    def docker(self, container: str) -> Docker: ...
    def time(self, time: datetime.time, date: datetime.date | None = None) -> Time: ...
    process: Process
